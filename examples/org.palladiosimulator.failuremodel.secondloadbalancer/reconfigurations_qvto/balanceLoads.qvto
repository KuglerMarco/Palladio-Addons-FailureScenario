/*
 * LeastResponsetime version of LoadBalancing
 * measured responsetime values of the two servers are considered
 * 
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/*
 * The transformation signature declares that a RuntimeMeasurement modeltype is required as input, while an PCM
 * modeltype is transformed inplace. The RuntimeMeasurement modeltype is referenced as 'RuntimeMeasurement' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation outsource(	in runtimeMeasurement : RUNTIMEMEASUREMENT,
							//inout pcmRepository : PCM_REP,
							//in pcmSystem : PCM_SYS,
							inout pcmAllocation : PCM_ALLOC
							//in pcmResources : PCM_RES_ENV
							) {
							
							
	// Define Threshold and Scale Out
	property threshold : Real = 2.0;
	property outsourceDirection : Real = 0.0;
	property respTimeS1 : Real = 0.0;
	property respTimeS2 : Real = 0.0;

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	
		log('SimuLizar Outsource Rule Transformation started');
		
		assert fatal(runtimeMeasurement.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
			
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
			
		// Assert true for the return value of the condition check to get correct reconfiguration time measuring points
		assert error (runtimeMeasurement.rootObjects()[RuntimeMeasurement]->checkCondition() = true)
			with log ("No reconfiguration required");	

	}
	
	helper Set(RuntimeMeasurement) :: checkCondition() : Boolean {
	
		self->forEach(measurement) {
		log('Measured value at ' + measurement.measuringPoint.stringRepresentation + ' is ' + measurement.measuringValue.toString());
			
			if (measurement.measuringPoint.stringRepresentation = 'ExternalCall aName from LoadBalancer to AC_Server1->processRequest [_8nlBcAEoEeS7FKokKTKFow]') {
					respTimeS1 := measurement.measuringValue;
			};
			if (measurement.measuringPoint.stringRepresentation = 'ExternalCall aName from LoadBalancer to AC_Server2->processRequest [_-fSxAAEoEeS7FKokKTKFow]') {
					respTimeS2 := measurement.measuringValue;
					
					if(respTimeS1 > threshold) {
						var direction = 0.0;
						if (respTimeS1 > respTimeS2) {
							direction := 1.0;
						};
						if (respTimeS1 <= respTimeS2) {
							direction := -1.0;
						};
						var factor = 0.09;
//						if (respTimeS2 <> 0.0) {
//							factor := respTimeS1 / respTimeS2;
//						};
						outsourceDirection := direction * factor;
						log('Balancing direction:' + outsourceDirection.toString());
						
						log('Threshold is exceeded');
						pcmAllocation.rootObjects()[Allocation]->forAll(
							allocation : Allocation | 
							outSourceProcessing(allocation.allocationContexts_Allocation)
						);
						return true;
					};
					if(respTimeS1 <= threshold) {
						var direction = -1.0;
						var factor = 0.09;
						outsourceDirection := direction * factor;
						log('Balancing direction:' + outsourceDirection.toString());
						
						pcmAllocation.rootObjects()[Allocation]->forAll(
							allocation : Allocation | 
							outSourceProcessing(allocation.allocationContexts_Allocation)
						);
						return true;
					};
			};
		};
		
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
	}
	
	/**
	 * outsource Processing.
	 */
	helper outSourceProcessing(allocationContexts : Set(AllocationContext)) : Boolean {
	
	log('Found ' +  allocationContexts->size().toString() + ' AllocationContexts');
	
		allocationContexts->forEach(allocation){

			if( allocation.assemblyContext_AllocationContext.entityName = "AC_LoadBalancer" ) {
			
				allocation.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent->forEach(seff) {
					if(seff.oclIsTypeOf(ResourceDemandingSEFF)) {
						var branch1 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(entityName="delegateToServer1");
						log('Branch1: ' + branch1.toString());
						var branch2 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(entityName="delegateToServer2");
						log('Branch2: ' + branch2.toString());
						// if(branch2.branchProbability < 0.5 and branch1.branchProbability > 0.5) {
						if(true) {
						
							log('Balancing Load...');
							branch2.branchProbability := 1.0.min(0.0.max(branch2.branchProbability + outsourceDirection));
							log('Set branchProbability to ' + branch2.branchProbability.toString());
							branch1.branchProbability := 1.0.min(0.0.max(branch1.branchProbability - outsourceDirection));
							log('Set branchProbability to ' + branch1.branchProbability.toString());
							return true;
						};
					}
				}
			}
		};
		
		return false;
	}
	
}