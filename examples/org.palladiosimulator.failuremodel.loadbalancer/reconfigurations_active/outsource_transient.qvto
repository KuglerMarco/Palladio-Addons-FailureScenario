/*
 * This simple QVTO SimuLizar reconfiguration rule increases the processing rate of all
 * resources in case the monitored mean response time is greater than 3.0 (seconds). 
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.1';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype ACTIONS uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';

/*
 * The transformation signature declares that a RuntimeMeasurement modeltype is required as input, while an PCM
 * modeltype is transformed inplace. The RuntimeMeasurement modeltype is referenced as 'RuntimeMeasurement' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation outsource_transient(in runtimeMeasurement : RUNTIMEMEASUREMENT,
						          inout pcmAllocation : PCM_ALLOC,
						          inout actionsInput : ACTIONS,
						          out roleSets : INSTANCE) {
							
	property adaptationBehaviourRepository : AdaptationBehaviorRepository = actionsInput.rootObjects()[core::AdaptationBehaviorRepository]->any(true);

	main() {
		var adaptationBehaviour : AdaptationBehavior := adaptationBehaviourRepository.actions->select(a | a.id = '__jamgLUlEeW-zrkZJ6KTtQ')->any(true);
		var allocation : Allocation := pcmAllocation.rootObjects()[Allocation]->any(true);
		var system : System := allocation.system_Allocation;
		var loadBalancerAC : AssemblyContext := system.assemblyContexts__ComposedStructure->select(ac | ac.encapsulatedComponent__AssemblyContext.id = "_NvLi8AEmEeS7FKokKTKFow")->any(true);
		var loadBalancerComponent : BasicComponent := loadBalancerAC.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent);
		var loadBalancerSeff : ResourceDemandingSEFF := loadBalancerComponent.serviceEffectSpecifications__BasicComponent->select(seff | seff.oclAsType(ResourceDemandingSEFF).id = "_yAN2oAEnEeS7FKokKTKFow")->any(true).oclAsType(ResourceDemandingSEFF);
		
		var roleSet : RoleSet := object RoleSet@roleSets {
			roles += object instance::Role {
				roleType := adaptationBehaviour.getRoleTypeById('_j4aNJLUnEeW-zrkZJ6KTtQ');
				value := loadBalancerSeff.allSubobjects()[ProbabilisticBranchTransition]->any(entityName="delegateToServer1").oclAsType(EObject);
			};
			
			roles += object instance::Role {
				roleType := adaptationBehaviour.getRoleTypeById('_Fi5x1LUoEeW-zrkZJ6KTtQ');
				value := loadBalancerSeff.allSubobjects()[ProbabilisticBranchTransition]->any(entityName="delegateToServer2").oclAsType(EObject);
			};
		};
		adaptationBehaviour.execute(roleSet);
	}
	
	query AdaptationBehavior::getRoleTypeById(id : String) : RoleType {
		return self.involvedRoles->select(r | r.id = id)->any(true);
	}
}